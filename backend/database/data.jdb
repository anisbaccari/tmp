
db.serialize(function() {

    db.run("PRAGMA foreign_keys = ON;", (err) => {
        if (err) {
            fastify.log.error("Error enabling foreign keys:", err);
        } else {
            fastify.log.info("Foreign key constraints enabled.");
        }
    });
    db.run(
      `CREATE TABLE IF NOT EXISTS users (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          name TEXT NOT NULL,
          email TEXT NOT NULL UNIQUE
       )`,
      (err) => {
        if (err) {
          fastify.log.error('Error creating users table:', err);
        } else {
          fastify.log.info('Users table ready.');
        }
      }
    );
    
    db.run(
      `CREATE TABLE IF NOT EXISTS Student (
          student_id INTEGER PRIMARY KEY AUTOINCREMENT,
          name TEXT NOT NULL,
          email TEXT UNIQUE NOT NULL
       )`,
      (err) => {
        if (err) {
          fastify.log.error('Error creating student table:', err);
        } else {
          fastify.log.info('Student table ready.');
        }
      }
    );

    db.run(
      `CREATE TABLE IF NOT EXISTS Professor (
          professor_id INTEGER PRIMARY KEY AUTOINCREMENT,
          name TEXT NOT NULL,
          email TEXT UNIQUE NOT NULL
       )`,
      (err) => {
        if (err) {
          fastify.log.error('Error creating professor table:', err);
        } else {
          fastify.log.info('Professor table ready.');
        }
      }
    );

    db.run(
      `CREATE TABLE IF NOT EXISTS Course (
          course_id INTEGER PRIMARY KEY AUTOINCREMENT,
          title TEXT NOT NULL,
          professor_id INTEGER UNIQUE,
          FOREIGN KEY (professor_id) REFERENCES Professor(professor_id) ON DELETE SET NULL
       )`,
      (err) => {
        if (err) {
          fastify.log.error('Error creating course table:', err);
        } else {
          fastify.log.info('Course table ready.');
        }
      }
    );

    db.run(
      `CREATE TABLE IF NOT EXISTS Enrollment (
          student_id INTEGER,
          course_id INTEGER,
          PRIMARY KEY (student_id, course_id),
          FOREIGN KEY (student_id) REFERENCES Student(student_id) ON DELETE CASCADE,
          FOREIGN KEY (course_id) REFERENCES Course(course_id) ON DELETE CASCADE
       )`,
      (err) => {
        if (err) {
          fastify.log.error('Error creating enrollment table:', err);
        } else {
          fastify.log.info('Enrollment table ready.');
        }
      }
    );

    // Insert Professor
    db.run(
      `INSERT INTO Professor (name, email) VALUES (?, ?)`,
      ["Dr. Smith", "drsmith@example.com"],
      function(err) {
        if (err) {
          fastify.log.error("Error inserting professor:", err);
          return;
        }
        const professorId = this.lastID;

        // Insert Course with the Professor
        db.run(
          `INSERT INTO Course (title, professor_id) VALUES (?, ?)`,
          ["Mathematics 101", professorId],
          function(err) {
            if (err) {
              fastify.log.error("Error inserting course:", err);
              return;
            }
            const courseId = this.lastID;

            // Insert Multiple Students
            const students = [
              ["Alice Johnson", "alice@example.com"],
              ["Bob Williams", "bob@example.com"],
              ["Charlie Brown", "charlie@example.com"]
            ];

            students.forEach(student => {
              db.run(
                `INSERT INTO Student (name, email) VALUES (?, ?)`,
                student,
                function(err) {
                  if (err) {
                    fastify.log.error("Error inserting student:", err);
                    return;
                  }
                  const studentId = this.lastID;

                  // Enroll student in the course
                  db.run(
                    `INSERT INTO Enrollment (student_id, course_id) VALUES (?, ?)`,
                    [studentId, courseId],
                    (err) => {
                      if (err) {
                        fastify.log.error("Error enrolling student:", err);
                      } else {
                        fastify.log.info(`Student ${student[0]} enrolled in course Mathematics 101.`);
                      }
                    }
                  );
                }
              );
            });
          }
        );
      }
    );
});
